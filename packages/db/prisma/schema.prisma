// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  rooms     Room[]   @relation("UserRooms")
  messages  Message[] 
  participants RoomParticipant[]
  recordings Recording[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Room {
  id          String    @id @default(cuid())
  name        String
  users       User[]    @relation("UserRooms")
  messages    Message[]
  participants RoomParticipant[]
  recordings  Recording[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomParticipant {
  id        String   @id @default(cuid())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isMuted   Boolean  @default(false)
  isVideoOn Boolean  @default(false)
  role      Role     @default(GUEST)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
}
model Recording {
  id        String   @id @default(cuid())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  isMerged  Boolean  @default(false)
  finalUrl  String?  // S3 URL
  chunks    RecordingChunk[]
}

model RecordingChunk {
  id          String    @id @default(cuid())
  recording   Recording @relation(fields: [recordingId], references: [id])
  recordingId String
  url         String    // S3 chunk URL
  order       Int       // sequence
  uploadedAt  DateTime  @default(now())
}

enum Role {
  HOST
  CO_HOST
  GUEST
}
